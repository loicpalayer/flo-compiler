# serializer version: 1
# name: test_affectation
  '''
  %include	"io.asm"
  section	.bss
  sinput:	resb	255	;reserve a 255 byte space in memory for the users input string
  v$a:	resd	1
  section	.text
  global _start
  _f:
  	push	7		
  	pop	eax		
  	mov	[ebp-4],	eax	
  	mov	eax,	[ebp-4]	
  	push	eax		
  	pop	eax		
  	call	iprintLF		
  	push	5		
  	pop	eax		
  	ret					 ; retourne à l'appel de la fonction
  _start:
  	push	ebp		
  	push	5		
  	call	_f		
  	add	esp,	4	
  	pop	ebp		
  	push	eax		
  	pop	eax		
  	mov	eax,	1			 ; 1 est le code de SYS_EXIT
  	int	0x80				 ; exit
  
  '''
# ---
# name: test_function
  '''
  %include	"io.asm"
  section	.bss
  sinput:	resb	255	;reserve a 255 byte space in memory for the users input string
  v$a:	resd	1
  section	.text
  global _start
  _f:
  	push	3		
  	pop	eax		
  	ret					 ; retourne à l'appel de la fonction
  _start:
  	push	ebp		
  	call	_f		
  	add	esp,	0	
  	pop	ebp		
  	push	eax		
  	pop	eax		
  	call	iprintLF		
  	mov	eax,	1			 ; 1 est le code de SYS_EXIT
  	int	0x80				 ; exit
  
  '''
# ---
# name: test_function_with_param
  '''
  %include	"io.asm"
  section	.bss
  sinput:	resb	255	;reserve a 255 byte space in memory for the users input string
  v$a:	resd	1
  section	.text
  global _start
  _f:
  	mov	eax,	[ebp-4]	
  	push	eax		
  	pop	eax		
  	call	iprintLF		
  	push	1		
  	pop	eax		
  	ret					 ; retourne à l'appel de la fonction
  _start:
  	mov	eax,	1			 ; 1 est le code de SYS_EXIT
  	int	0x80				 ; exit
  
  '''
# ---
# name: test_if
  '''
  %include	"io.asm"
  section	.bss
  sinput:	resb	255	;reserve a 255 byte space in memory for the users input string
  v$a:	resd	1
  section	.text
  global _start
  _f:
  	mov	eax,	[ebp-4]	
  	push	eax		
  	push	5		
  	pop	ebx				 ; dépile la seconde operande dans ebx
  	pop	eax				 ; dépile la permière operande dans eax
  	cmp	eax,	ebx			 ; compare eax et ebx
  	setg	al				 ; met al à 1 si eax > ebx
  	push	eax				 ; empile le résultat
  	pop	eax		
  	cmp	eax,	0	
  	je	e0		
  	mov	eax,	[ebp-4]	
  	push	eax		
  	pop	eax		
  	call	iprintLF		
  	jmp	e1		
  	e0:			
  	push	5		
  	pop	eax		
  	call	iprintLF		
  	push	6		
  	pop	eax		
  	call	iprintLF		
  	e1:			
  	push	1		
  	pop	eax		
  	ret					 ; retourne à l'appel de la fonction
  _start:
  	push	ebp		
  	push	5		
  	call	_f		
  	add	esp,	4	
  	pop	ebp		
  	push	eax		
  	pop	eax		
  	mov	eax,	1			 ; 1 est le code de SYS_EXIT
  	int	0x80				 ; exit
  
  '''
# ---
# name: test_invalid1
  Exception("return en dehors d'une fonction")
# ---
# name: test_invalid2
  Exception('return de type différent de la fonction')
# ---
# name: test_invalid3
  Exception('return de type différent de la fonction')
# ---
# name: test_invalid_call
  Exception("type d'argument différent de la fonction")
# ---
